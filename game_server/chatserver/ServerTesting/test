FA_LOCATION|1|1738|topaz|Ted|43.706552|-72.000000|0


FA_LOCATION|0|1738|topaz|Ted|43.606552|-72.000000|1
FA_LOCATION|0|1788|topaz|Ted1|43.70662|-72.05000|1
FA_LOCATION|0|1798|topaz|Ted2|43.70662|-72.05000|1

FA_LOCATION|0|5678|topaz2|Ted5|43.70662|-72.05000|1
FA_LOCATION|0|6449|topaz2|Ted6|43.70662|-72.05000|1

FA_LOCATION|0|1348|topaz3|Ted8|43.80662|-72.000000|1

FA_LOCATION|0|1458|topaz4|Ted7|43.70662|-72.05000|1
FA_LOCATION|0|1458|topaz4|Ted7|43.70662|-72.05000|1

FA_LOCATION|1|1738|topaz|Ted|43.706552|-72.000000|1
FA_LOCATION|1|1738|topaz|Ted|43.706552|-72.000000|1
FA_LOCATION|1|1788|topaz|Ted1|43.70662|-72.05000|1
FA_LOCATION|1|1798|topaz|Ted2|43.70662|-72.05000|1
FA_LOCATION|1|5678|topaz2|Ted5|43.70662|-72.05000|1
FA_LOCATION|1|6449|topaz2|Ted6|43.70662|-72.05000|1
FA_LOCATION|1|1348|topaz3|Ted8|43.706552|-72.000000|1
FA_LOCATION|1|1458|topaz4|Ted7|43.70662|-72.05000|1
FA_LOCATION|1|1458|topaz4|Ted7|43.70662|-72.05000|1


Join the game
FA_LOCATION|0|1|topaz|Alex|43|-72|1
FA_LOCATION|0|2|topaz|Benn|43|-72|1
FA_LOCATION|0|3|topaz|Chad|44|-72|1
FA_LOCATION|0|4|topaz|Dane|43|-72|1

FA_LOCATION|0|5|ruby|Mike|43|-72|1
FA_LOCATION|0|6|ruby|Nick|44|-72|1
FA_LOCATION|0|7|ruby|Otto|43|-72|1

FA_LOCATION|0|10|diamond|Zeta|43|-72|1
FA_LOCATION|0|11|diamond|Yeti|44|-72|1
FA_LOCATION|0|12|diamond|Xena|43.704259|-72.289328|1

FA_CAPTURE|111F|1|topaz|Alex|0

FA_NEUTRALIZE|111F|12|diamond|Xena|43.704259|-72.289328|61966






FA_LOCATION|1|12|diamond|Xena|43.704259|-72.289328|1







FA_LOCATION|1|1738|topaz|Ted|43.706552|-72.000000|1

FA_CAPTURE|1|1788|topaz|Ted1|0

FA_CAPTURE|1|1788|topaz|Ted1|37623

FA_NEUTRALIZE|1|1458|topaz4|Ted7|42.70662|-72.05000|F20E

FA_NEUTRALIZE|1|1458|topaz4|Ted7|43.704259|-72.289328|F20E
FA_NEUTRALIZE|1|1458|topaz4|Ted7|43.704259|-72.289328|F20E
FA_NEUTRALIZE|1|1458|topaz4|Ted7|43.704259|-72.289328|F20F
FA_NEUTRALIZE|1|1458|topaz4|Ted7|43.704259|-72.289328|F20P


wrong location --> error
correct --> MI message
Wrong hex --> ignore
invalid hex --> invalid hex message


void playerProximityIterator(void *key, void* data, void* farg){ 
	utility_t *utility_p = (utility_t *) farg;
	FAPlayer_t *FAPlayer_p = (FAPlayer_t *) data;

	double *lat = *(double *) utility_p->param1;
	double *lng = *(double *) utility_p->param2;
	hashtable_t *hash = (hashtable_t *) utility_p->param3;
	char * TeamName = (char *) utility_p->param4;

	double distance = dist(lat, lng, FAPlayer_p->lat, FAPlayer_p->lng);
	printf("distance: %f", distance)

	if ((strcmp(TeamName, FAPlayer_p->TeamName)) != 0){
		if (distance < 10){
			if (FAPlayer_p->status != 1) {
				FAPlayer_p->status = 2;
				hashtable_insert(hash, FAPlayer_p->PebbleID, FAPlayer_p);
			}
		}
	}
}

void FA_CAPTURE_handler(hashStruct_t *allGameInfo, char** messageArray, int arraySize, receiverAddr_t *playerAddr){
	int gameIDFlag, playerIDFlag;

	//Validate the number of arguments in the message
	if (arraySize != 6){
		GSResponseHandler(allGameInfo, playerAddr, "you need 6 pieces of information",  "MI_ERROR_INVALID_OPCODE_LENGTH");
		return;
	}

	//Validate each of the parameters
	gameIDFlag = gameIDHandler(allGameInfo, messageArray, playerAddr);
	playerIDFlag = playerIDHandler(allGameInfo, messageArray, playerAddr);

	if (!teamNameHandler(allGameInfo, messageArray, playerAddr)) return;

	if (playerNameHandler(allGameInfo, messageArray,playerAddr)) {
		printf("player true\n");
	} else {
		printf("player false\n");
		return;
	}

	if ((gameIDFlag != 0) || (playerIDFlag != 0)){
		if (gameIDFlag == 1){
		GSResponseHandler(allGameInfo, playerAddr, "You were added to this game before",  "MI_ERROR_INVALID_GAME_ID");
		return;
		} else if (gameIDFlag != 1){
			GSResponseHandler(allGameInfo, playerAddr, "This ID is not registered",  "MI_ERROR_INVALID_ID");
			return;
		}
	}

	utility_t *utility_p = malloc(sizeof(utility_t));
	

	FAPlayer_t *capturingPlayer = hashtable_find(allGameInfo->FA, messageArray[2]);
	hashtable_t *closePlayers = hashtable_new(1, deleteTempHash, NULL);
	hash_iterate(closePlayers, playerProximityIterator, utility_p);
}

bool validateHexInt(int hexValue, receiverAddr_t *playerAddr, hashStruct_t *allGameInfo){
	if (hexValue > 65535 || hexValue < 0){
		GSResponseHandler(allGameInfo, playerAddr, "Not a valid hex code",  "MI_ERROR_INVALID_ID");
		return false;
	} else {
		return true;
	}
}