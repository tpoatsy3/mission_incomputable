/* Testing file for list.c */

/* Ihab Basri , CS50 , April 24th, 2016*/

/*File: list.c - a data structure module for a list of (string, data)pairs
*
*Lab 3 Question 2 list.c 
*
* A module that export three functions: creating a new list, finding nodes in the
list based on the key (tag) and inserting items into the list if they are linked to a
*new key	 
*
*Ihab Basri, CS50, Dartmouth College, April 24th, 2016*/

####################################################
#To test my list.c modules, I used a testfile listtest.c that will test the different functions of 
#list.c and different scenarios where the functions could fail or return NULL.
#listtest.c is compiled with list.c, Makefile, and "list" header file
####################################################

###################################################
#testing the delete function (test1)
####################################################

[hooby@wildcat ~/cs50/labs/lab3/list_EXTRA]$ valgrind listtest
==18539== Memcheck, a memory error detector
==18539== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==18539== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==18539== Command: listtest
==18539==

==18539==
==18539== HEAP SUMMARY:
==18539==     in use at exit: 0 bytes in 0 blocks
==18539==   total heap usage: 13 allocs, 13 frees, 184 bytes allocated
==18539==
==18539== All heap blocks were freed -- no leaks are possible
==18539==
==18539== For counts of detected and suppressed errors, rerun with: -v
==18539== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)



**** as we can see above, all the memory that have been allocated is free now
	and it will seg fault if you try to use the pointer after deleting it.

****SUCCESS

//end